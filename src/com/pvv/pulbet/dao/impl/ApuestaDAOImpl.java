package com.pvv.pulbet.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.pvv.pulbet.dao.ApuestaDAO;
import com.pvv.pulbet.dao.util.ConnectionManager;
import com.pvv.pulbet.dao.util.JDBCUtils;
import com.pvv.pulbet.exception.DataException;
import com.pvv.pulbet.model.Apuesta;
import com.pvv.pulbet.model.Usuario;

public class ApuestaDAOImpl implements ApuestaDAO{

	public ApuestaDAOImpl() {

	}

	public Apuesta findById(Integer id)
			throws Exception {
		Apuesta a = null;

		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			connection = ConnectionManager.getConnection();

			String sql;
			sql =  "SELECT ID_APUESTA, IMPORTE, ID_USUARIO, FECHA "
					+"FROM APUESTA "
					+"WHERE ID_USUARIO = ? ";

			// Preparar a query
			System.out.println("Creating statement...");
			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);


			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			if (resultSet.next()) {
				a =  loadNext(resultSet);			
				//System.out.println("Cargado "+u);
			} else {
				throw new Exception("Non se atopou apuesta con id = "+id);
			}
			if (resultSet.next()) {
				throw new Exception("Apuesta con id = "+id+" duplicado");
			}

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeConnection(connection);
		}  	

		return a;
	}

	public List<Apuesta> findByUsuario(Integer id)
			throws Exception {


		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			connection = ConnectionManager.getConnection();

			String sql;
			sql =  "SELECT ID_APUESTA, IMPORTE, ID_USUARIO, FECHA "
					+"FROM APUESTA "
					+"WHERE ID_USUARIO = ? ";

			// Preparar a query
			System.out.println("Creating statement...");
			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);


			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Apuesta> results = new ArrayList<Apuesta>();                        
			Apuesta a = null;


			while(resultSet.next()) {
				a = loadNext(resultSet);
				results.add(a);               	
			}

			return results;

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeConnection(connection);
		}  	

	}

	//falta algun finder para buscar apostas deperminadas, inda non determinadas e eso...

	public Apuesta create(Apuesta a) 
			throws Exception{
		Connection connection = null; 
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {          

			connection = ConnectionManager.getConnection();


			String queryString = "INSERT INTO APUESTA(IMPORTE, ID_USUARIO, FECHA) "
					+ "VALUES (?, ?, ?)";

			preparedStatement = connection.prepareStatement(queryString, Statement.RETURN_GENERATED_KEYS);

			int i = 1;     			
			preparedStatement.setDouble(i++, a.getImporte());
			preparedStatement.setLong(i++, a.getIdUsuario());
			preparedStatement.setDate(i++, new java.sql.Date(a.getFecha().getTime()));



			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'Apuesta'");
			}

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Long id = resultSet.getLong(1);
				a.setIdApuesta(id);				
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}


			//...
			return a;					

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
			JDBCUtils.closeConnection(connection);
		}

	}

	@Override
	public List<Apuesta> findAll() throws Exception {

		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			connection = ConnectionManager.getConnection();

			String sql;
			sql =  "SELECT ID_APUESTA, IMPORTE, ID_USUARIO, FECHA "
					+"FROM APUESTA";

			// Preparar a query
			System.out.println("Creating statement...");
			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Apuesta> results = new ArrayList<Apuesta>();                        
			Apuesta a = null;


			while(resultSet.next()) {
				a = loadNext(resultSet);
				results.add(a);               	
			}

			return results;

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeConnection(connection);
		}  	
	}



	private Apuesta loadNext(ResultSet resultSet) 
			throws Exception{


		Apuesta a = new Apuesta();
		int i = 1;
		Long idApuesta = resultSet.getLong(i++);
		Double importe = resultSet.getDouble(i++);
		Long idUsuario = resultSet.getLong(i++); 
		Date fecha = resultSet.getDate(i++);

		a.setIdApuesta(idApuesta);
		a.setImporte(importe);
		a.setFecha(fecha);
		a.setIdUsuario(idUsuario);
		//Departamento d = departamentoDAO.findByIdEmpleado() temos que crear private departamentoDAO = new departamentoDAO() en departamentoDAO
		// u.setDeptId

		return a;

	}


}
