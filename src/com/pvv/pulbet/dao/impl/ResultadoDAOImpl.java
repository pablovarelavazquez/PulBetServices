package com.pvv.pulbet.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.pvv.pulbet.dao.ResultadoDAO;
import com.pvv.pulbet.dao.util.JDBCUtils;
import com.pvv.pulbet.exceptions.DataException;
import com.pvv.pulbet.exceptions.DuplicateInstanceException;
import com.pvv.pulbet.exceptions.InstanceNotFoundException;
import com.pvv.pulbet.model.Resultado;
import com.pvv.pulbet.model.Usuario;

public class ResultadoDAOImpl implements ResultadoDAO{
	
	private static Logger logger = LogManager.getLogger(ResultadoDAOImpl.class);	

//	@Override
//	public Resultado create(Connection connection, Resultado r) throws DuplicateInstanceException, DataException {
//		
//		
//		if(logger.isDebugEnabled()) {
//			logger.debug("Resultado = {}", r);
//		}
//
//		PreparedStatement preparedStatement = null;
//		ResultSet resultSet = null;
//		try {          
//
//			String queryString = "INSERT INTO RESULTADO(NOMBRE, ID_TIPO_RESULTADO) "
//					+ "VALUES (?,?)";
//
//			preparedStatement = connection.prepareStatement(queryString, Statement.RETURN_GENERATED_KEYS);
//
//			int i = 1;     			
//			preparedStatement.setString(i++, r.getNombre());
//			preparedStatement.setLong(i++, r.getIdTipoResulatado());
//
//			
//
//			int insertedRows = preparedStatement.executeUpdate();
//
//			if (insertedRows == 0) {
//				throw new SQLException("Can not add row to table 'Resultado'");
//			}
//
//			resultSet = preparedStatement.getGeneratedKeys();
//			if (resultSet.next()) {
//				Long id = resultSet.getLong(1);
//				r.setIdResultado(id);
//			} else {
//				throw new DataException("Unable to fetch autogenerated primary key");
//			}
//
//			return r;					
//
//		} catch (SQLException ex) {
//			logger.warn(ex.getMessage(), ex);
//			throw new DataException(ex);
//		} finally {
//			JDBCUtils.closeResultSet(resultSet);
//			JDBCUtils.closeStatement(preparedStatement);			
//		}
//
//	}
//
//	@Override
//	public Long delete(Connection connection, Long id) throws InstanceNotFoundException, DataException {
//		
//		if(logger.isDebugEnabled()) {
//			logger.debug("Id = {}", id);
//		}
//		
//		PreparedStatement preparedStatement = null;
//
//		try {
//
//			String queryString =	
//					"DELETE FROM RESULTADO " 
//					+ "WHERE ID_RESULTADO = ? ";
//
//
//			preparedStatement = connection.prepareStatement(queryString);
//
//			int i = 1;
//			preparedStatement.setLong(i++, id);
//
//			long removedRows = preparedStatement.executeUpdate();
//
//			if (removedRows == 0) {
//				throw new InstanceNotFoundException("Non se atopou o resultado: "+id,Resultado.class.getName());
//			} 
//			return removedRows;
//
//		} catch (SQLException e) {
//			logger.warn(e.getMessage(), e);
//			throw new DataException(e);
//		} finally {
//			JDBCUtils.closeStatement(preparedStatement);
//		}
//
//		
//	}
	

	@Override
	public Resultado findById(Connection connection, Integer id, String idioma) throws InstanceNotFoundException, DataException {
		
		if(logger.isDebugEnabled()) {
			logger.debug("Id = {}", id);
		}
		
		Resultado r = null;

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {

			String sql;
			sql =  "SELECT R.ID_RESULTADO, RI.NOMBRE, R.ID_TIPO_RESULTADO "
					+" FROM RESULTADO R INNER JOIN RESULTADO_IDIOMA RI ON RI.ID_RESULTADO = R.ID_RESULTADO "
					+"WHERE R.ID_RESULTADO = ? AND RI.COD_IDIOMA = ?";

			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);
			preparedStatement.setString(i++, idioma);


			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			if (resultSet.next()) {
				r =  loadNext(connection,resultSet);			
				//System.out.println("Cargado "+u);
			} else {
				throw new InstanceNotFoundException("Non se atopou RESULTADO con id = "+id, Resultado.class.getName());
			}


		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}  	

		return r;
	}

	@Override
	public List<Resultado> findByTipoResultado(Connection connection, Integer id, String idioma) throws DataException {
		
		if(logger.isDebugEnabled()) {
			logger.debug("Id = {}", id);
		}
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try{

			String sql;
			sql =    "SELECT R.ID_RESULTADO, RI.NOMBRE, R.ID_TIPO_RESULTADO " 
					+" FROM RESULTADO R INNER JOIN RESULTADO_IDIOMA RI ON RI.ID_RESULTADO = R.ID_RESULTADO "
					+" WHERE "
					+"R.ID_TIPO_RESULTADO = ? AND RI.COD_IDIOMA = ?";


			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);
			preparedStatement.setString(i++, idioma);

			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Resultado> results = new ArrayList<Resultado>();                        
			Resultado r = null;


			while(resultSet.next()) {
				r = loadNext(connection,resultSet);
				results.add(r);               	
			}

			return results;

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}
	}
	
	@Override
	public List<Resultado> findAll(Connection connection, String idioma) throws DataException {

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {

			String sql;
			sql =  	"SELECT R.ID_RESULTADO, RI.NOMBRE, R.ID_TIPO_RESULTADO "
					+"FROM RESULTADO R INNER JOIN RESULTADO_IDIOMA RI ON RI.ID_RESULTADO = R.ID_RESULTADO "
					+ "WHERE RI.COD_IDIOMA = ?";

			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			
			// Establece os parámetros
			int i = 1;
			preparedStatement.setString(i++, idioma);

			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Resultado> results = new ArrayList<Resultado>();                        
			Resultado r = null;


			while(resultSet.next()) {
				r = loadNext(connection, resultSet);
				results.add(r);               	
			}

			return results;

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}  	
	}
	
	@Override
	public Resultado findCuota(Connection connection, Long idEvento, Long idResultado, String idioma) throws DataException {
		if(logger.isDebugEnabled()) {
			logger.debug("IdEvento = {}, idResultado = {}", idEvento, idResultado);
		}
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try{

			String sql;
			sql =    "SELECT R.ID_RESULTADO, RI.NOMBRE ,R.ID_TIPO_RESULTADO, E.ID_EVENTO, RP.CUOTA " 
					+" FROM RESULTADO R INNER JOIN RESULTADO_PARTICIPANTE_EVENTO RP ON RP.ID_RESULTADO=R.ID_RESULTADO "
					+" INNER JOIN EVENTO E ON E.ID_EVENTO = RP.ID_EVENTO "
					+ "INNER JOIN RESULTADO_IDIOMA RI ON R.ID_RESULTADO = RI.ID_RESULTADO "
					+ " WHERE E.ID_EVENTO = ? AND R.ID_RESULTADO = ? AND RI.COD_IDIOMA = ? "
					+"	GROUP BY ID_EVENTO, ID_RESULTADO";

			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, idEvento);
			preparedStatement.setLong(i++, idResultado);
			preparedStatement.setString(i++, idioma);


			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			Resultado r = null;


			if(resultSet.next()) {
				r = loadNextCuotas(connection,resultSet);
			}

			return r;

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}
	}

	private Resultado loadNextCuotas(Connection connection,ResultSet resultSet) throws SQLException{


		Resultado r = new Resultado();
		int i = 1;
		Long id = resultSet.getLong(i++);
		String nome = resultSet.getString(i++);
		Long idtr = resultSet.getLong(i++);
		Long idEv = resultSet.getLong(i++);
		Double cuota = resultSet.getDouble(i++);
		
		r.setIdResultado(id);
		r.setNombre(nome);
		r.setIdTipoResulatado(idtr);
		r.setIdEvento(idEv);
		r.setCuota(cuota);

		return r;

	}
	
	private Resultado loadNext(Connection connection,ResultSet resultSet) throws SQLException{


		Resultado r = new Resultado();
		int i = 1;
		Long id = resultSet.getLong(i++);
		String nome = resultSet.getString(i++);
		Long idtr = resultSet.getLong(i++);
		
		r.setIdResultado(id);
		r.setNombre(nome);
		r.setIdTipoResulatado(idtr);

		return r;

	}
	
	
}
