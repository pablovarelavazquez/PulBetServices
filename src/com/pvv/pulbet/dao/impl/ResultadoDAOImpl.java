package com.pvv.pulbet.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.pvv.pulbet.dao.ResultadoDAO;
import com.pvv.pulbet.dao.util.JDBCUtils;
import com.pvv.pulbet.exceptions.DataException;
import com.pvv.pulbet.exceptions.DuplicateInstanceException;
import com.pvv.pulbet.exceptions.InstanceNotFoundException;
import com.pvv.pulbet.model.Resultado;
import com.pvv.pulbet.model.Usuario;

public class ResultadoDAOImpl implements ResultadoDAO{
	
	private static Logger logger = LogManager.getLogger(ResultadoDAOImpl.class);	

	@Override
	public Resultado create(Connection connection, Resultado r) throws DuplicateInstanceException, DataException {
		
		
		if(logger.isDebugEnabled()) {
			logger.debug("Resultado = {}", r);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {          

			String queryString = "INSERT INTO RESULTADO(NOMBRE, ID_TIPO_RESULTADO) "
					+ "VALUES (?,?)";

			preparedStatement = connection.prepareStatement(queryString, Statement.RETURN_GENERATED_KEYS);

			int i = 1;     			
			preparedStatement.setString(i++, r.getNombre());
			preparedStatement.setLong(i++, r.getIdTipoResulatado());

			

			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'Resultado'");
			}

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Long id = resultSet.getLong(1);
				r.setIdResultado(id);
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}

			return r;					

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
		}

	}

	@Override
	public Long delete(Connection connection, Long id) throws InstanceNotFoundException, DataException {
		
		if(logger.isDebugEnabled()) {
			logger.debug("Id = {}", id);
		}
		
		PreparedStatement preparedStatement = null;

		try {

			String queryString =	
					"DELETE FROM RESULTADO " 
					+ "WHERE ID_RESULTADO = ? ";


			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;
			preparedStatement.setLong(i++, id);

			long removedRows = preparedStatement.executeUpdate();

			if (removedRows == 0) {
				throw new InstanceNotFoundException("Non se atopou o resultado: "+id,Resultado.class.getName());
			} 
			return removedRows;

		} catch (SQLException e) {
			logger.warn(e.getMessage(), e);
			throw new DataException(e);
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}

		
	}
	

	@Override
	public Resultado findById(Connection connection, Integer id) throws InstanceNotFoundException, DataException {
		
		if(logger.isDebugEnabled()) {
			logger.debug("Id = {}", id);
		}
		
		Resultado r = null;

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {

			String sql;
			sql =  "SELECT ID_RESULTADO, NOMBRE, ID_TIPO_RESULTADO "
					+"FROM RESULTADO "
					+"WHERE ID_RESULTADO = ? ";

			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);


			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			if (resultSet.next()) {
				r =  loadNext(connection,resultSet);			
				//System.out.println("Cargado "+u);
			} else {
				throw new InstanceNotFoundException("Non se atopou RESULTADO con id = "+id, Resultado.class.getName());
			}


		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}  	

		return r;
	}

	@Override
	public List<Resultado> findByTipoResultado(Connection connection, Integer id) throws DataException {
		
		if(logger.isDebugEnabled()) {
			logger.debug("Id = {}", id);
		}
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try{

			String sql;
			sql =    "SELECT ID_RESULTADO, NOMBRE, ID_TIPO_RESULTADO " 
					+" FROM RESULTADO "
					+" WHERE "
					+"	ID_TIPO_RESULTADO = ?";


			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);

			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Resultado> results = new ArrayList<Resultado>();                        
			Resultado r = null;


			while(resultSet.next()) {
				r = loadNext(connection,resultSet);
				results.add(r);               	
			}

			return results;

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}
	}
	
	@Override
	public List<Resultado> findAll(Connection connection) throws DataException {

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {

			String sql;
			sql =  "SELECT ID_RESULTADO, ID_TIPO_RESULTRADO "
					+"FROM RESULTADO ";

			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Resultado> results = new ArrayList<Resultado>();                        
			Resultado r = null;


			while(resultSet.next()) {
				r = loadNext(connection, resultSet);
				results.add(r);               	
			}

			return results;

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}  	
	}
	
	
	private Resultado loadNext(Connection connection,ResultSet resultSet) throws SQLException{


		Resultado r = new Resultado();
		int i = 1;
		Long id = resultSet.getLong(i++);
		String nome = resultSet.getString(i++);
		Long idtr = resultSet.getLong(i++);
		
		r.setIdResultado(id);
		r.setNombre(nome);
		r.setIdTipoResulatado(idtr);

		return r;

	}

}
