package com.pvv.pulbet.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.pvv.pulbet.dao.TipoResultadoDAO;
import com.pvv.pulbet.dao.util.ConnectionManager;
import com.pvv.pulbet.dao.util.JDBCUtils;
import com.pvv.pulbet.exception.DataException;
import com.pvv.pulbet.model.TipoResultado;
import com.pvv.pulbet.model.Usuario;

public class TipoResultadoDAOImpl implements TipoResultadoDAO{

	@Override
	public TipoResultado create(Connection connection, TipoResultado t) throws Exception {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {          

			connection = ConnectionManager.getConnection();

			String queryString = "INSERT INTO TIPO_RESULTADO(NOMBRE) "
					+ "VALUES (?)";

			preparedStatement = connection.prepareStatement(queryString, Statement.RETURN_GENERATED_KEYS);

			int i = 1;     			
			preparedStatement.setString(i++, t.getNome());



			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'TipoResultado'");
			}

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Integer id = resultSet.getInt(1);
				t.setIdTipoResultado(id);
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}

			return t;					

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
		}

	}

	@Override
	public long delete(Connection connection, Integer id) throws Exception {
		PreparedStatement preparedStatement = null;

		try {
			connection = ConnectionManager.getConnection();

			String queryString =	
					"DELETE FROM TIPO_RESULTADO " 
							+ "WHERE ID_TIPO_RESULTADO = ? ";


			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;
			preparedStatement.setLong(i++, id);

			long removedRows = preparedStatement.executeUpdate();


			return removedRows;

		} catch (SQLException e) {
			throw new DataException(e);
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}


	}

	@Override
	public TipoResultado findById(Connection connection, Integer id) throws Exception {
		TipoResultado t = null;

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			connection = ConnectionManager.getConnection();


			String sql;
			sql =  "SELECT ID_TIPO_RESULTADO, NOMBRE "
					+"FROM TIPO_RESULTADO "
					+"WHERE ID_TIPO_RESULTADO = ? ";

			// Preparar a query
			System.out.println("Creating statement...");
			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);


			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			if (resultSet.next()) {
				t =  loadNext(resultSet);			
				//System.out.println("Cargado "+u);
			} else {
				throw new Exception("Non se atopou TIPO_RESULTADO con id = "+id);
			}
			if (resultSet.next()) {
				throw new Exception("TIPO_RESULTADO con id = "+id+" duplicado");
			}

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}  	

		return t;
	}

	@Override
	public List<TipoResultado> findByEvento(Connection connection, Long id) throws Exception {

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try{

			connection = ConnectionManager.getConnection();

			String sql;
			sql =    "SELECT T.ID_TIPO_RESULTADO, T.NOMBRE " 
					+" FROM TIPO_RESULTADO T INNER JOIN TIPO_RESULTADO_EVENTO E ON T.ID_TIPO_RESULTADO = E.ID_TIPO_RESULTADO "
					+" WHERE "
					+"	E.ID_EVENTO = ?";


			// Preparar a query
			System.out.println("Creating statement...");
			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);

			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<TipoResultado> results = new ArrayList<TipoResultado>();                        
			TipoResultado t = null;


			while(resultSet.next()) {
				t = loadNext(resultSet);
				results.add(t);               	
			}

			return results;

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}
	}

	private TipoResultado loadNext(ResultSet resultSet) throws Exception{


		TipoResultado t = new TipoResultado();
		int i = 1;
		Integer id = resultSet.getInt(i++);
		String nome = resultSet.getString(i++);

		t.setIdTipoResultado(id);
		t.setNome(nome);

		return t;

	}


}
