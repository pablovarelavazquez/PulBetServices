package com.pvv.pulbet.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.pvv.pulbet.dao.DeporteDAO;
import com.pvv.pulbet.dao.util.JDBCUtils;
import com.pvv.pulbet.exceptions.DataException;
import com.pvv.pulbet.exceptions.DuplicateInstanceException;
import com.pvv.pulbet.exceptions.InstanceNotFoundException;
import com.pvv.pulbet.model.Deporte;
import com.pvv.pulbet.model.Usuario;

public class DeporteDAOImpl implements DeporteDAO{
	
	private static Logger logger = LogManager.getLogger(DeporteDAOImpl.class);
	
	@Override
	public Deporte create(Connection connection, Deporte d) throws DuplicateInstanceException, DataException {
		
		if(logger.isDebugEnabled()) {
			logger.debug("Deporte = {} ", d);
		}
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {          


			String queryString = "INSERT INTO DEPORTE(NOMBRE) "
					+ "VALUES (?)";

			preparedStatement = connection.prepareStatement(queryString, Statement.RETURN_GENERATED_KEYS);

			int i = 1;     			
			preparedStatement.setString(i++, d.getNome());

			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'DEPORTE'");
			}

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Long id = resultSet.getLong(1);
				d.setIdDeporte(id);				
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}


			//...
			return d;					

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
		}
	}

	@Override
	public Long delete(Connection connection, Long id) throws InstanceNotFoundException, DataException {
		
		if(logger.isDebugEnabled()) {
			logger.debug("ID = {} ", id);
		}
		
		PreparedStatement preparedStatement = null;

		try {

			String queryString =	
					"DELETE FROM DEPORTE " 
					+ "WHERE ID_DEPORTE = ? ";


			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;
			preparedStatement.setLong(i++, id);

			long removedRows = preparedStatement.executeUpdate();

			if (removedRows == 0) {
				throw new InstanceNotFoundException("Non se atopou deporte: "+id,Deporte.class.getName());
			} 

			return removedRows;

		} catch (SQLException e) {
			logger.warn(e.getMessage(), e);
			throw new DataException(e);
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}

	}

	@Override
	public List<Deporte> findAll(Connection connection) throws DataException {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {

			String sql;
			sql =  "SELECT ID_DEPORTE, NOMBRE "
					+"FROM DEPORTE ";

			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Deporte> results = new ArrayList<Deporte>();                        
			Deporte d = null;


			while(resultSet.next()) {
				d = loadNext(connection, resultSet);
				results.add(d);               	
			}

			return results;

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}  	
	}
	

	@Override
	public List<Deporte> findByNombre(Connection connection, String nombre) throws DataException {
		
		if(logger.isDebugEnabled()) {
			logger.debug("Nombre = {}", nombre);
		}

		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try{

			String sql;
			sql =    "SELECT ID_DEPORTE, NOMBRE " 
					+" FROM DEPORTE "
					+" WHERE "
					+"	UPPER(NOMBRE) LIKE ?"; 

			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setString(i++, "%"+nombre.toUpperCase()+"%");

			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set

			List<Deporte> results = new ArrayList<Deporte>();                        
			Deporte d = null;


			while(resultSet.next()) {
				d = loadNext(connection, resultSet);
				results.add(d);               	
			}
			
			 
			return results;
			
		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}
	}
	
	@Override
	public Deporte findById(Connection connection, Long id) throws InstanceNotFoundException, DataException {
		
		if(logger.isDebugEnabled()) {
			logger.debug("Id = {}", id);
		}
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Deporte d = null;
		try{

			String sql;
			sql =    "SELECT ID_DEPORTE, NOMBRE " 
					+" FROM DEPORTE "
					+" WHERE ID_DEPORTE = ?"; 

			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);

			resultSet = preparedStatement.executeQuery();			

			if (resultSet.next()) {
				d =  loadNext(connection, resultSet);			
			} else {
				throw new InstanceNotFoundException("Non se atopou usuario con id = "+id, Usuario.class.getName());
			}

			return d;
			
		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}
	}
	
private Deporte loadNext(Connection connection, ResultSet resultSet) throws SQLException{
		
		Deporte d = new Deporte();
		int i = 1;
		Long id = resultSet.getLong(i++);
		String nome = resultSet.getString(i++);

		d.setIdDeporte(id);
		d.setNome(nome);
		
		return d;
	}



}
