package com.pvv.pulbet.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.pvv.pulbet.dao.EventoDAO;
import com.pvv.pulbet.dao.ParticipanteDAO;
import com.pvv.pulbet.dao.TipoResultadoDAO;
import com.pvv.pulbet.dao.util.JDBCUtils;
import com.pvv.pulbet.exceptions.DataException;
import com.pvv.pulbet.exceptions.DuplicateInstanceException;
import com.pvv.pulbet.exceptions.InstanceNotFoundException;
import com.pvv.pulbet.model.Evento;
import com.pvv.pulbet.model.Participante;
import com.pvv.pulbet.model.TipoResultado;
import com.pvv.pulbet.model.Usuario;
import com.pvv.pulbet.service.EventoCriteria;

public class EventoDAOImpl implements EventoDAO{

	private static Logger logger = LogManager.getLogger(EventoDAOImpl.class);
	private TipoResultadoDAO tipoResultadoDAO = null;
	private ParticipanteDAO participanteDAO = null;

	public EventoDAOImpl() {
		tipoResultadoDAO = new TipoResultadoDAOImpl();
		participanteDAO = new ParticipanteDAOImpl();
	}

	@Override
	public Evento create(Connection connection, Evento e) throws DuplicateInstanceException, DataException {

		if(logger.isDebugEnabled()) {
			logger.debug("Evento = {}", e);
		}


		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {          

			String queryString = "INSERT INTO EVENTO(FECHA_HORA,ID_COMPETICION) "
					+ "VALUES (?, ?)";

			preparedStatement = connection.prepareStatement(queryString, Statement.RETURN_GENERATED_KEYS);

			int i = 1;     			
			preparedStatement.setDate(i++, new java.sql.Date(e.getFecha().getTime()));
			preparedStatement.setLong(i++, e.getIdCompeticion());


			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'Employees'");
			}

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Long id = resultSet.getLong(1);
				e.setIdEvento(id);				
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}

			return e;					

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
		}
	}

	@Override
	public Long delete(Connection connection, Long id) throws InstanceNotFoundException, DataException {

		if(logger.isDebugEnabled()) {
			logger.debug("Id = {}", id);
		}

		PreparedStatement preparedStatement = null;

		try {

			String queryString =	
					"DELETE FROM EVENTO " 
							+ "WHERE ID_EVENTO = ? ";


			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;
			preparedStatement.setLong(i++, id);

			long removedRows = preparedStatement.executeUpdate();

			if (removedRows == 0) {
				throw new InstanceNotFoundException("Non se atopou evento: "+id,Evento.class.getName());
			} 

			return removedRows;

		} catch (SQLException e) {
			logger.warn(e.getMessage(), e);
			throw new DataException(e);
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}
	}

	@Override
	public void update(Connection connection, Evento e)
			throws InstanceNotFoundException, DataException{

		if(logger.isDebugEnabled()) {
			logger.debug("Evento = {}", e);
		}


		PreparedStatement preparedStatement = null;
		try {          

			String queryString = "UPDATE EVENTO "
					+ "SET FECHA_HORA = ?, "
					+ "ID_COMPETICION = ?, "
					+ "WHERE ID_EVENTO= ? ";

			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;     			
			preparedStatement.setDate(i++, new java.sql.Date(e.getFecha().getTime()));
			preparedStatement.setLong(i++, e.getIdCompeticion());
			preparedStatement.setLong(i++, e.getIdEvento());


			int updatedRows = preparedStatement.executeUpdate();

			if (updatedRows == 0) {
				throw new InstanceNotFoundException("Non se atopou o evento "+e.getIdEvento(), Evento.class.getName());
			}

			if (updatedRows > 1) {
				throw new SQLException("Duplicate row for id = '" + e.getIdEvento() + "' in table 'Evento'");
			}

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeStatement(preparedStatement);			
		}
	}


	@Override
	public List<Evento> findByCriteria(Connection connection, EventoCriteria evento) throws DataException {

		if(logger.isDebugEnabled()) {
			logger.debug("EventoCriteria = {}", evento);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuilder queryString = null;

		try {

			queryString = new StringBuilder(
					"select e.id_evento, e.fecha_hora, e.id_competicion, c.id_deporte, p.id_participante "
							+ "from evento e inner join competicion c on c.id_competicion = e.id_competicion "
							+ "inner join resultado_participante_evento p on p.id_evento = e.id_evento ");

			boolean first = true;


			if (evento.getIdEvento()!=null) {
				addClause(queryString, first, " e.id_evento = ? ");
				first = false;
			}

			if (evento.getFecha()!=null) {
				addClause(queryString, first, " e.fecha_hora <= ? ");
				first = false;
			}

			if (evento.getIdCompeticion()!=null) {
				addClause(queryString, first, " e.id_competicion = ? ");
				first = false;
			}

			if (evento.getIdDeporte()!=null) {
				addClause(queryString, first, " c.id_deporte = ? ");
				first = false;
			}			

			if (evento.getIdParticipante()!=null) {
				addClause(queryString, first, " p.id_participante = ? ");
				first = false;
			}	


			queryString.append("group by e.id_evento order by e.fecha_hora ");

			preparedStatement = connection.prepareStatement(queryString.toString(),
					ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			int i = 1;       

			if (evento.getIdEvento()!=null) 
				preparedStatement.setLong(i++,  evento.getIdEvento() );
			if (evento.getFecha()!=null) 
				preparedStatement.setDate(i++, new java.sql.Date(evento.getFecha().getTime()));
			if (evento.getIdCompeticion()!=null) 
				preparedStatement.setLong(i++, evento.getIdCompeticion());
			if (evento.getIdDeporte()!=null)
				preparedStatement.setLong(i++, evento.getIdDeporte());
			if (evento.getIdParticipante()!=null) 
				preparedStatement.setLong(i++, evento.getIdParticipante());

			resultSet = preparedStatement.executeQuery();

			List<Evento> results = new ArrayList<Evento>();
			Evento e = null;

			while(resultSet.next()) {
				e = loadNext(connection, resultSet); 
				results.add(e);               	
			}


			return results;
		} catch (SQLException e) {
			logger.warn(e.getMessage(), e);
			throw new DataException(e);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}

	}


	@Override
	public Evento findById(Connection connection, Integer id) throws DataException {

		if(logger.isDebugEnabled()) {
			logger.debug("Id = {}", id);
		}
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuilder queryString = null;
		Evento e = null;

		try {

			queryString = new StringBuilder(
					"select e.id_evento, e.fecha_hora, e.id_competicion, c.id_deporte, p.id_participante "
							+ "from evento e inner join competicion c on c.id_competicion = e.id_competicion "
							+ "inner join resultado_participante_evento p on p.id_evento = e.id_evento "
							+ "where e.id_evento "
							+ "group by id_evento, id_participante order by e.fecha_hora");



			preparedStatement = connection.prepareStatement(queryString.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			int i = 1;
			preparedStatement.setLong(i++, id);


			resultSet = preparedStatement.executeQuery();			

			if (resultSet.next()) {
				e =  loadNext(connection, resultSet);			
			} else {
				throw new InstanceNotFoundException("Non se atopou usuario con id = "+id, Usuario.class.getName());
			}

			return e;
		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}
	}

	@Override
	public List<Long> findResultadoFinal(Connection connection, Long id) throws DataException {

		if(logger.isDebugEnabled()) {
			logger.debug("Id = {}", id);
		}		
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Long> resultados = new ArrayList<Long>();

		try {

			String queryString = 
					"SELECT ID_RESULTADO " + 
							"FROM RESULTADO_REAL " +
							"WHERE ID_EVENTO = ? ";

			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;
			preparedStatement.setLong(i++, id);

			resultSet = preparedStatement.executeQuery();

			while(resultSet.next()) {
				Long idResultado = resultSet.getLong(1);
				resultados.add(idResultado);
			}

			return resultados;

		} catch (SQLException e) {
			logger.warn(e.getMessage(), e);
			throw new DataException(e);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}



	}

	private Evento loadNext(Connection connection, ResultSet resultSet) throws SQLException, DataException{


		Evento e = new Evento();
		int i = 1;
		Long id = resultSet.getLong(i++);
		Date fecha = resultSet.getDate(i++);
		Long idComp = resultSet.getLong(i++);
		Long idDeporte = resultSet.getLong(i++);
		Long idParticipante = resultSet.getLong(i++);

		e.setIdEvento(id);
		e.setFecha(fecha);
		e.setIdCompeticion(idComp);
		e.setIdDeporte(idDeporte);
		e.setIdParticipante(idParticipante);

		List<TipoResultado> mercados = tipoResultadoDAO.findByDeporte(connection, idDeporte);
		e.setMercados(mercados);
		
		List<Participante> participantes = participanteDAO.findByEvento(connection, id);
		e.setParticipantes(participantes);
		
		return e;

	}

	private void addClause(StringBuilder queryString, boolean first, String clause) {
		queryString.append(first? "WHERE ": " AND ").append(clause);
	}

}
