package com.pvv.pulbet.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.pvv.pulbet.dao.EventoDAO;
import com.pvv.pulbet.dao.TipoResultadoDAO;
import com.pvv.pulbet.dao.util.ConnectionManager;
import com.pvv.pulbet.dao.util.JDBCUtils;
import com.pvv.pulbet.exceptions.DataException;
import com.pvv.pulbet.exceptions.DuplicateInstanceException;
import com.pvv.pulbet.exceptions.InstanceNotFoundException;
import com.pvv.pulbet.model.Evento;
import com.pvv.pulbet.model.TipoResultado;
import com.pvv.pulbet.service.EventoCriteria;

public class EventoDAOImpl implements EventoDAO{
	
	TipoResultadoDAO tipoResultadoDAO = null;
	
	public EventoDAOImpl() {
		tipoResultadoDAO = new TipoResultadoDAOImpl();
	}

	@Override
	public Evento create(Connection connection, Evento e) throws DuplicateInstanceException, DataException {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {          

			connection = ConnectionManager.getConnection();
			//Check if the primary key already exists
			//			if (exists(connection, e.getId())) {
			//				throw new Exception("Duplicate employee "+e.getId());
			//			}


			String queryString = "INSERT INTO EVENTO(FECHA_HORA,ID_COMPETICION) "
					+ "VALUES (?, ?)";

			preparedStatement = connection.prepareStatement(queryString, Statement.RETURN_GENERATED_KEYS);

			int i = 1;     			
			preparedStatement.setDate(i++, new java.sql.Date(e.getFecha().getTime()));
			preparedStatement.setLong(i++, e.getIdCompeticion());


			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'Employees'");
			}

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Long id = resultSet.getLong(1);
				e.setIdEvento(id);				
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}

			//...
			return e;					

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
		}

	}

	@Override
	public boolean update(Connection connection, Evento e) throws InstanceNotFoundException, DataException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Long delete(Connection connection, Long id) throws InstanceNotFoundException, DataException {
		PreparedStatement preparedStatement = null;

		try {
			connection = ConnectionManager.getConnection();

			String queryString =	
					"DELETE FROM EVENTO " 
							+ "WHERE ID_EVENTO = ? ";


			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;
			preparedStatement.setLong(i++, id);

			long removedRows = preparedStatement.executeUpdate();

			if (removedRows == 0) {
				throw new InstanceNotFoundException("Non se atopou evento: "+id,Evento.class.getName());
			} 
			
			return removedRows;

		} catch (SQLException e) {
			throw new DataException(e);
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}
	}

	

	@Override
	public List<Evento> findByCriteria(Connection connection, EventoCriteria evento) throws DataException {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuilder queryString = null;

		try {
			queryString = new StringBuilder(
					"select e.id_evento, e.fecha_hora, e.id_competicion, c.id_deporte, p.id_participante "
					+ "from evento e inner join competicion c on c.id_competicion = e.id_competicion "
					+ "inner join resultado_participante_evento p on p.id_evento = e.id_evento ");
			
			boolean first = true;
			
			//Inners

			if (evento.getIdDeporte()!=null) {
				queryString.append("INNER JOIN producto_categoria pc ON p.id_producto = pc.id_producto INNER JOIN categoria c ON c.id_categoria=pc.id_categoria ");	
			}

			if (evento.getIdParticipante()!=null) {
				queryString.append("INNER JOIN Producto_NJugadores pn ON p.id_producto = pn.id_producto INNER JOIN NJugadores n ON pn.id_njugador=n.id_nJugadores ");	
			}

			//Where/ands

			if (evento.getIdEvento()!=null) {
				addClause(queryString, first, " e.id_evento LIKE ? ");
				first = false;
			}

			if (evento.getFecha()!=null) {
				addClause(queryString, first, " p.nombre LIKE ? ");
				first = false;
			}

			if (evento.getIdCompeticion()!=null) {
				addClause(queryString, first, " p.precio LIKE ? ");
				first = false;
			}

			if (evento.getIdDeporte()!=null) {
				addClause(queryString, first, " p.anio LIKE ? ");
				first = false;
			}			

			if (evento.getIdParticipante()!=null) {
				addClause(queryString, first, " p.requisitos LIKE ? ");
				first = false;
			}	
			
			
			queryString.append("group by id_evento, id_participante");

			preparedStatement = connection.prepareStatement(queryString.toString(),
					ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			int i = 1;       

			if (evento.getIdEvento()!=null) 
				preparedStatement.setLong(i++,  evento.getIdEvento() );
			if (evento.getFecha()!=null) 
				preparedStatement.setDate(i++, new java.sql.Date(evento.getFecha().getTime()));
			if (evento.getIdCompeticion()!=null) 
				preparedStatement.setLong(i++, evento.getIdCompeticion());
			if (evento.getIdDeporte()!=null)
				preparedStatement.setLong(i++, evento.getIdDeporte());
			if (evento.getIdParticipante()!=null) 
				preparedStatement.setLong(i++, evento.getIdParticipante());



			resultSet = preparedStatement.executeQuery();

			List<Evento> results = new ArrayList<Evento>();
			Evento e = null;
			
			List<TipoResultado> mercados = null;
			
			while(resultSet.next()) {
				e = loadNext(resultSet); //facer outro load next
				mercados = tipoResultadoDAO.findByEvento(connection, e.getIdEvento());
				e.setMercados(mercados);
				results.add(e);               	
			}

		
			return results;
		} catch (SQLException e) {
			
			throw new DataException(e);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}

	}


	@Override
	public Evento findById(Connection connection, Integer id) throws DataException {
		// TODO Auto-generated method stub
		return null;
	}


	private Evento loadNext(ResultSet resultSet) throws SQLException{


		Evento e = new Evento();
		int i = 1;
		Long id = resultSet.getLong(i++);
		Date fecha = resultSet.getDate(i++);
		Long idComp = resultSet.getLong(i++);

		e.setIdEvento(id);
		e.setFecha(fecha);
		e.setIdCompeticion(idComp);
		
		
		return e;

	}

	private void addClause(StringBuilder queryString, boolean first, String clause) {
		queryString.append(first? "WHERE ": " AND ").append(clause);
	}



}
