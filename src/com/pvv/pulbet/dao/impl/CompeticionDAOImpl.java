package com.pvv.pulbet.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.pvv.pulbet.dao.CompeticionDAO;
import com.pvv.pulbet.dao.util.JDBCUtils;
import com.pvv.pulbet.exceptions.DataException;
import com.pvv.pulbet.exceptions.DuplicateInstanceException;
import com.pvv.pulbet.exceptions.InstanceNotFoundException;
import com.pvv.pulbet.model.Competicion;

public class CompeticionDAOImpl implements CompeticionDAO{

	private static Logger logger = LogManager.getLogger(CompeticionDAOImpl.class);

	@Override
	public Competicion create(Connection connection, Competicion c) throws DuplicateInstanceException, DataException {

		if(logger.isDebugEnabled()) {
			logger.debug("Competicion = {}", c);
		}


		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {          

			String queryString = "INSERT INTO COMPETICION(NOMBRE,ID_DEPORTE,FECHA_INICIO, FECHA_FIN) "
					+ "VALUES (?, ?, ?, ?)";

			preparedStatement = connection.prepareStatement(queryString, Statement.RETURN_GENERATED_KEYS);

			int i = 1;     			
			preparedStatement.setString(i++, c.getNome());
			preparedStatement.setLong(i++, c.getIdDeporte());
			preparedStatement.setDate(i++, new java.sql.Date(c.getFechaInicio().getYear()));
			preparedStatement.setDate(i++, new java.sql.Date(c.getFechaFin().getYear()));


			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'COMPETICION'");
			}

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Long id = resultSet.getLong(1);
				c.setIdCompeticion(id);				
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}



			return c;					

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
		}
	}

	@Override
	public boolean update(Connection connection, Competicion c) throws InstanceNotFoundException, DataException {

		if(logger.isDebugEnabled()) {
			logger.debug("Competicion = {}", c);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {          

			String queryString = "UPDATE COMPETICION "
					+ "SET NOMBRE = ?, "
					+ "SET ID_DEPORTE = ?, "
					+ "SET FECHA_INICIO = ?,"
					+ "SET FECHA_FIN = ?,"
					+ "WHERE ID_COMPETICION=?";

			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;     			
			preparedStatement.setString(i++, c.getNome());
			preparedStatement.setLong(i++, c.getIdDeporte());
			preparedStatement.setDate(i++, new java.sql.Date(c.getFechaInicio().getTime()));
			preparedStatement.setDate(i++, new java.sql.Date(c.getFechaFin().getTime()));
			preparedStatement.setLong(i++, c.getIdCompeticion());


			int updatedRows = preparedStatement.executeUpdate();

			if (updatedRows == 0) {
				throw new InstanceNotFoundException("Non se atopou competicion: "+c.getIdCompeticion(), Competicion.class.getName());
			}

			if (updatedRows > 1) {
				throw new SQLException("Duplicate row for id = '" + 
						c.getIdCompeticion() + "' in table 'competicion'");
			}    
			else { return true;}

			//...


		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
		}
	}

	@Override
	public long delete(Connection connection, Long id) throws InstanceNotFoundException, DataException {


		if(logger.isDebugEnabled()) {
			logger.debug("Id = {} ", id);
		}
		PreparedStatement preparedStatement = null;

		try {

			String queryString =	
					"DELETE FROM COMPETICION " 
							+ "WHERE ID_COMPETICION = ? ";


			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;
			preparedStatement.setLong(i++, id);

			long removedRows = preparedStatement.executeUpdate();

			if (removedRows == 0) {
				throw new InstanceNotFoundException("Non se atopou competicion: "+id,Competicion.class.getName());
			} 
			return removedRows;

		} catch (SQLException e) {
			logger.warn(e.getMessage(), e);
			throw new DataException(e);
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}

	}

	@Override
	public Competicion findById(Connection connection, Long id) throws InstanceNotFoundException, DataException {

		if(logger.isDebugEnabled()) {
			logger.debug("Id = {}", id);
		}

		Competicion c = null;

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {

			String sql;
			sql =  "SELECT ID_COMPETICION,NOMBRE,ID_DEPORTE,FECHA_INICIO, FECHA_FIN "
					+"FROM COMPETICION "
					+"WHERE ID_COMPETICION = ? ";

			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);


			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			if (resultSet.next()) {
				c =  loadNext(connection,resultSet);			
				//System.out.println("Cargado "+u);
			} else {
				throw new InstanceNotFoundException("Non se atopou competicion con id = "+id, Competicion.class.getName());
			}


		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}  	

		return c;
	}

	@Override
	public List<Competicion> findByDeporte(Connection connection, Long id) throws DataException {
		
		if(logger.isDebugEnabled()) {
			logger.debug("Id = {}", id);
		}
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {

			String sql;
			sql =  "SELECT ID_COMPETICION, NOMBRE, ID_DEPORTE, FECHA_INICIO, FECHA_FIN "
					+"FROM COMPETICION "
					+"WHERE ID_DEPORTE = ? ";

			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);


			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Competicion> results = new ArrayList<Competicion>();                        
			Competicion c= null;


			while(resultSet.next()) {
				c = loadNext(connection,resultSet);
				results.add(c);               	
			}

			return results;

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}  	
	}

	@Override
	public List<Competicion> findAll(Connection connection) throws DataException {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {

			String sql;
			sql =  "SELECT ID_COMPETICION, NOMBRE, ID_DEPORTE, FECHA_INICIO, FECHA_FIN "
					+"FROM COMPETICION";

			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Competicion> results = new ArrayList<Competicion>();                        
			Competicion c = null;


			while(resultSet.next()) {
				c = loadNext(connection,resultSet);
				results.add(c);               	
			}

			return results;

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}
	}

	@Override
	public List<Competicion> findByNombre(Connection connection, String nome) throws DataException {
		
		if(logger.isDebugEnabled()) {
			logger.debug("Nome = {}", nome);
		}
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try{

			String sql;
			sql =    "SELECT ID_COMPETICION, NOMBRE, ID_DEPORTE, FECHA_INICIO, FECHA_FIN " 
					+" FROM COMPETICION "
					+" WHERE "
					+"	UPPER(NOMBRE) LIKE ?";

			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setString(i++, "%"+nome.toUpperCase()+"%");



			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set

			List<Competicion> results = new ArrayList<Competicion>();                        
			Competicion c = null;


			while(resultSet.next()) {
				c = loadNext(connection,resultSet);
				results.add(c);               	
			}


			return results;

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}  
	}

	private Competicion loadNext(Connection connection, ResultSet resultSet) 
			throws SQLException{


		Competicion c = new Competicion();
		int i = 1;
		Long idCompeticion = resultSet.getLong(i++);
		String nome = resultSet.getString(i++);
		Long idDeporte = resultSet.getLong(i++); 
		Date fechaInicio = resultSet.getDate(i++);
		Date fechaFin = resultSet.getDate(i++);

		c.setIdCompeticion(idCompeticion);
		c.setNome(nome);
		c.setIdDeporte(idDeporte);
		c.setFechaInicio(fechaInicio);
		c.setFechaFin(fechaFin);

		return c;

	}

}
