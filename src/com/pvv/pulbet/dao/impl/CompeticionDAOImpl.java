package com.pvv.pulbet.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.pvv.pulbet.dao.CompeticionDAO;
import com.pvv.pulbet.dao.util.ConnectionManager;
import com.pvv.pulbet.dao.util.JDBCUtils;
import com.pvv.pulbet.exception.DataException;
import com.pvv.pulbet.model.Apuesta;
import com.pvv.pulbet.model.Competicion;
import com.pvv.pulbet.model.Usuario;

public class CompeticionDAOImpl implements CompeticionDAO{

	@Override
	public Competicion create(Competicion c) throws Exception {
		Connection connection = null; 
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {          

			connection = ConnectionManager.getConnection();

			String queryString = "INSERT INTO COMPETICION(NOMBRE,ID_DEPORTE,FECHA_INICIO, FECHA_FIN) "
					+ "VALUES (?, ?, ?, ?)";

			preparedStatement = connection.prepareStatement(queryString, Statement.RETURN_GENERATED_KEYS);

			int i = 1;     			
			preparedStatement.setString(i++, c.getNome());
			preparedStatement.setLong(i++, c.getIdDeporte());
			preparedStatement.setDate(i++, new java.sql.Date(c.getFechaInicio().getYear()));
			preparedStatement.setDate(i++, new java.sql.Date(c.getFechaFin().getYear()));


			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'COMPETICION'");
			}

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Long id = resultSet.getLong(1);
				c.setIdCompeticion(id);				
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}


			//...
			return c;					

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
			JDBCUtils.closeConnection(connection);
		}
	}

	@Override
	public boolean update(Competicion c) throws Exception {
		Connection connection = null; 
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {          

			connection = ConnectionManager.getConnection();
			//Check if the primary key already exists
			//		if (exists(connection, e.getId())) {
			//			throw new Exception("Duplicate employee "+e.getId());
			//		}


			String queryString = "UPDATE COMPETICION "
					+ "SET NOMBRE = ?, "
					+ "SET ID_DEPORTE = ?, "
					+ "SET FECHA_INICIO = ?,"
					+ "SET FECHA_FIN = ?,"
					+ "WHERE ID_COMPETICION=?";

			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;     			
			preparedStatement.setString(i++, c.getNome());
			preparedStatement.setLong(i++, c.getIdDeporte());
			preparedStatement.setDate(i++, new java.sql.Date(c.getFechaInicio().getTime()));
			preparedStatement.setDate(i++, new java.sql.Date(c.getFechaFin().getTime()));
			preparedStatement.setLong(i++, c.getIdCompeticion());


			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) 
			{

				throw new SQLException("Can not uppdate row to table 'COMPETICION'");

			} 
			else { return true;}

			//...


		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
			JDBCUtils.closeConnection(connection);
		}
	}

	@Override
	public long delete(Long id) throws Exception {
		Connection connection = null; 
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;

		try {
			connection = ConnectionManager.getConnection();

			String queryString =	
					"DELETE FROM COMPETICION " 
					+ "WHERE ID_COMPETICION = ? ";


			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;
			preparedStatement.setLong(i++, id);

			long removedRows = preparedStatement.executeUpdate();


			return removedRows;

		} catch (SQLException e) {
			throw new DataException(e);
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}
		
	}

	@Override
	public Competicion findById(Long id) throws Exception {
		Competicion c = null;

		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			connection = ConnectionManager.getConnection();

			String sql;
			sql =  "SELECT ID_COMPETICION,NOMBRE,ID_DEPORTE,FECHA_INICIO, FECHA_FIN "
					+"FROM COMPETICION "
					+"WHERE ID_COMPETICION = ? ";

			// Preparar a query
			System.out.println("Creating statement...");
			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);


			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			if (resultSet.next()) {
				c =  loadNext(resultSet);			
				//System.out.println("Cargado "+u);
			} else {
				throw new Exception("Non se atopou competicion con id = "+id);
			}
			if (resultSet.next()) {
				throw new Exception("Competicion con id = "+id+" duplicada");
			}

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeConnection(connection);
		}  	

		return c;
	}

	@Override
	public List<Competicion> findByDeporte(Long id) throws Exception {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			connection = ConnectionManager.getConnection();

			String sql;
			sql =  "SELECT ID_COMPETICION, NOMBRE, ID_DEPORTE, FECHA_INICIO, FECHA_FIN "
					+"FROM COMPETICION "
					+"WHERE ID_DEPORTE = ? ";

			// Preparar a query
			System.out.println("Creating statement...");
			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setLong(i++, id);


			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Competicion> results = new ArrayList<Competicion>();                        
			Competicion c= null;


			while(resultSet.next()) {
				c = loadNext(resultSet);
				results.add(c);               	
			}

			return results;

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeConnection(connection);
		}  	
	}
	
	@Override
	public List<Competicion> findAll() throws Exception {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			connection = ConnectionManager.getConnection();

			String sql;
			sql =  "SELECT ID_COMPETICION, NOMBRE, ID_DEPORTE, FECHA_INICIO, FECHA_FIN "
					+"FROM COMPETICION";

			// Preparar a query
			System.out.println("Creating statement...");
			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Competicion> results = new ArrayList<Competicion>();                        
			Competicion c = null;


			while(resultSet.next()) {
				c = loadNext(resultSet);
				results.add(c);               	
			}

			return results;

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeConnection(connection);
		}
	}

	@Override
	public List<Competicion> findByNombre(String nome) throws Exception {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try{

			connection = ConnectionManager.getConnection();

			String sql;
			sql =    "SELECT ID_COMPETICION, NOMBRE, ID_DEPORTE, FECHA_INICIO, FECHA_FIN " 
					+" FROM COMPETICION "
					+" WHERE "
					+"	UPPER(NOMBRE) LIKE ?";
					
			// Preparar a query
			System.out.println("Creating statement...");
			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			// Establece os parámetros
			int i = 1;
			preparedStatement.setString(i++, "%"+nome.toUpperCase()+"%");



			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set

			List<Competicion> results = new ArrayList<Competicion>();                        
			Competicion c = null;


			while(resultSet.next()) {
				c = loadNext(resultSet);
				results.add(c);               	
			}
			
			 
			return results;
			
		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeConnection(connection);
		}  
	}
	
	private Competicion loadNext(ResultSet resultSet) 
			throws Exception{


		Competicion c = new Competicion();
		int i = 1;
		Long idCompeticion = resultSet.getLong(i++);
		String nome = resultSet.getString(i++);
		Long idDeporte = resultSet.getLong(i++); 
		Date fechaInicio = resultSet.getDate(i++);
		Date fechaFin = resultSet.getDate(i++);

		c.setIdCompeticion(idCompeticion);
		c.setNome(nome);
		c.setIdDeporte(idDeporte);
		c.setFechaInicio(fechaInicio);
		c.setFechaFin(fechaFin);
		//Departamento d = departamentoDAO.findByIdEmpleado() temos que crear private departamentoDAO = new departamentoDAO() en departamentoDAO
		// u.setDeptId

		return c;

	}

}
